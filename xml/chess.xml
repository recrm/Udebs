<udebs>

<config>
    <revert>100</revert>
    <hex>diag</hex>
</config>

<definitions>
    <lists>
        <status />
        <movelist />
    </lists>
    <stats>
        <ACT />
        <FLP />
    </stats>
    <strings>
        <colour />
        <sprite />
    </strings>
</definitions>

<maps>
    <board>
        <dim>
            <x>10</x>
            <y>10</y>
        </dim>
    </board>
    <map>
        <dim>
            <x>8</x>
            <y>8</y>
        </dim>
    </map>
</maps>

<entities>
    
    <!-- tiles -->
    <topleft immutable="">
        <sprite>TL</sprite>
    </topleft>
    <topright immutable="">
        <sprite>TR</sprite>
    </topright>
    <bottomleft immutable="">
        <sprite>BL</sprite>
    </bottomleft>
    <bottomright immutable="">
        <sprite>BR</sprite>
    </bottomright>
    <top immutable="">
        <sprite>T</sprite>
    </top>
    <bottom immutable="">
        <sprite>B</sprite>
    </bottom>
    <left immutable="">
        <sprite>L</sprite>
    </left>
    <right immutable="">
        <sprite>R</sprite>
    </right>
    <white_square immutable="">
        <sprite>white</sprite>
    </white_square>
    <black_square immutable="">
        <sprite>black</sprite>
    </black_square>
    
    <!-- fill -->
    <fill_horizontal>
        <require>DISTANCE 'y' == 0</require>
    </fill_horizontal>
    
    <fill_vertical>
        <require>DISTANCE 'x' == 0</require>
    </fill_vertical>
    
    <fill_diag>
        <require>(target.x + target.y) % 2 == 0</require>
    </fill_diag>
    
    <diagonal>
        <require>DISTANCE x == DISTANCE y</require>
    </diagonal>
    
    <nonempty>
        <require>target.name != 'empty'</require>
    </nonempty>
    
    <isempty>
        <require>target.name == 'empty'</require>
    </isempty>
    
    <blockx>
        <require>
            <i>target.name == 'empty'</i>
            <i>DISTANCE x * DISTANCE y == 0</i>
        </require>
    </blockx>
    
    <blockdiag>
        <require>
            <i>target.name == 'empty'</i>
            <i>DISTANCE x == DISTANCE y</i>
        </require>
    </blockdiag>
    
    
    <!-- init -->
    <init>
        <effect>
            <i>CAST empty boardrecruit</i>
            <i>CAST empty brecruit</i>
            <i>CAST empty wrecruit</i>
        </effect>
    </init>
    
    <boardrecruit>
        <effect>
            <i>MOVE black_square (FILL (4,4,"board") isempty)</i>
            <i>MOVE white_square (FILL (4,4,"board") fill_diag)</i>
            <i>MOVE top (FILL (0,0,"board") fill_horizontal)</i>
            <i>MOVE bottom (FILL (9,9,"board") fill_horizontal)</i>
            <i>MOVE left (FILL (0,0,"board") fill_vertical)</i>
            <i>MOVE right (FILL (9,9,"board") fill_vertical)</i>
            <i>MOVE topleft (0,0,"board")</i>
            <i>MOVE topright (9,0,"board")</i>
            <i>MOVE bottomleft (0,9,"board")</i>
            <i>MOVE bottomright (9,9,"board")</i>
        </effect>
    </boardrecruit>
    
    <brecruit>
        <effect>
            <i>RECRUIT pawn (FILL (0,1) fill_horizontal)</i>
            <i>RECRUIT rook (0,0)</i>
            <i>RECRUIT rook (7,0)</i>
            <i>RECRUIT knight (1,0)</i>
            <i>RECRUIT knight (6,0)</i>
            <i>RECRUIT bishop (2,0)</i>
            <i>RECRUIT bishop (5,0)</i>
            <i>RECRUIT king (4,0)</i>
            <i>RECRUIT queen (3,0)</i>
            <i>GETS (FILL (0,1) nonempty) group black</i>
        </effect>
    </brecruit>
    
    <wrecruit>
        <effect>
            <i>RECRUIT pawn (FILL (0,6) fill_horizontal)</i>
            <i>RECRUIT rook (0,7)</i>
            <i>RECRUIT rook (7,7)</i>
            <i>RECRUIT knight (1,7)</i>
            <i>RECRUIT knight (6,7)</i>
            <i>RECRUIT bishop (2,7)</i>
            <i>RECRUIT bishop (5,7)</i>
            <i>RECRUIT king (4,7)</i>
            <i>RECRUIT queen (3,7)</i>
            <i>GETS (FILL (0,6) nonempty) group white</i>
        </effect>
    </wrecruit>

    
    <!-- statuses groups-->
    <status_group>
        <require>move.name not in STAT target status</require>
        <effect>GETS target status move.name</effect>
    </status_group>
    
    <!-- statuses -->
    <moved_once>
        <group>status_group</group>
    </moved_once>
    
    <promote>
        <require>caster.y in [0,7]</require>
        <effect>
            <i>new = RECRUIT queen caster</i>
            <i>GETS var.new group (CLASS caster tick)</i>
        </effect>
        <group>status_group</group>
    </promote>
    
    <passant_danger>
        <effect>DELAY (LOSES target status passant_danger) 2</effect>
        <group>status_group</group>
    </passant_danger>
    
    <captured>
        <require>target.name != 'empty'</require>
        <group>status_group</group>
    </captured>
    
    <!-- moves groups -->

    <time>
        <require>
            <i>STAT C ACT &gt;= 2</i>
            <i>FUTURE (check((FILTER kings (CLASS caster tick)), (CLASS caster tick), self))</i>
        </require>
        <effect>
            <i>CHANGE (CLASS C tick) ACT -(STAT C ACT)</i>
            <i>CAST caster moved_once</i>
        </effect>
    </time>
    
    <normal>
        <require>
            <i>CLASS caster tick not in STAT target group</i>
        </require>
        <effect>
            <i>TRAVEL target</i>
            <i>CAST target captured</i>
        </effect>
    </normal>

    <pawn_move>
        <require>(target.y * STAT C FLP) &lt; (caster.y * STAT C FLP)</require>
        <effect>CAST caster promote</effect>
    </pawn_move>
    
    <king_castle>
        <require>
            <i>CLASS caster tick in STAT target group</i>
            <i>'moved_once' not in STAT caster status</i>
            <i>'moved_once' not in STAT target status</i>
            <i>BLOCK blockx</i>
            <i>check(caster.name, (CLASS caster tick), self)</i> 
        </require>
        <effect>CAST target moved_once</effect>
    </king_castle>
    
    <!-- moves -->

    <pawn_travel>
        <require>
            <i>DISTANCE 'y' == 1</i>
            <i>DISTANCE 'x' == 0</i>
            <i>target.name == 'empty'</i>            
        </require>
        <group>
            <i>normal</i>
            <i>pawn_move</i>
            <i>time</i>
        </group>
    </pawn_travel>

    <pawn_double>
        <require>
            <i>'moved_once' not in STAT caster 'status'</i>
            <i>DISTANCE 'x' == 0</i>
            <i>DISTANCE 'y' == 2</i>
            <i>target.name == 'empty'</i>
            <i>BLOCK blockx</i>
        </require>
        <effect>CAST caster 'passant_danger'</effect>
        <group>
            <i>normal</i>
            <i>pawn_move</i>
            <i>time</i>
        </group>
    </pawn_double>
    
    <pawn_capture>
        <require>
            <i>DISTANCE x == DISTANCE y == 1</i>
            <i>target.name != 'empty'</i>
        </require>
        <group>
            <i>normal</i>
            <i>pawn_move</i>
            <i>time</i>
        </group>
    </pawn_capture>

    <pawn_passant>
        <require>
            <i>CLASS caster tick not in STAT target group</i>
            <i>'passant_danger' in STAT target status</i>
            <i>DISTANCE x == 1</i>
            <i>DISTANCE y == 0</i>
        </require>
        <effect>
            <i>TRAVEL (target.x, caster.y - STAT C FLP)</i>
            <i>target TRAVEL bump</i>
            <i>CAST target captured</i>
        </effect>
        <group>
            <i>time</i>
        </group>
    </pawn_passant>
    
    <rook_travel>
        <require>
            <i>DISTANCE x * DISTANCE y == 0</i>
            <i>BLOCK blockx</i>
        </require>
        <group>
            <i>normal</i>
            <i>time</i>
        </group>
    </rook_travel>
    
    <knight_travel>
        <require>D
            <i>DISTANCE p1 == 3</i>
            <i>DISTANCE x > 0</i>
            <i>DISTANCE y > 0</i>
        </require>
        <group>
            <i>normal</i>
            <i>time</i>
        </group>
    </knight_travel>
    
    <bishop_travel>
        <require>
            <i>DISTANCE y == DISTANCE x</i>
            <i>BLOCK blockdiag</i>
        </require>
        <group>
            <i>normal</i>
            <i>time</i>
        </group>
    </bishop_travel>
    
    <king_travel>
        <require>DISTANCE 'pinf' == 1</require>
        <group>
            <i>normal</i>
            <i>time</i>
        </group>
    </king_travel>
    
    <king_kcastle>
        <require>
            <i>'rook' in target.name</i>
            <i>target.x &gt; caster.x</i>
            <i>check((caster.x+1, caster.y), (CLASS caster tick), self)</i>
        </require>
        <effect>
            <i>caster TRAVEL (caster.x +2, caster.y)</i>
            <i>target TRAVEL (target.x -2, caster.y)</i>
        </effect>
        <group>
            <i>king_castle</i>
            <i>time</i>
        </group>
    </king_kcastle>
    
    <king_qcastle>
        <require>
            <i>'rook' in target.name</i>
            <i>target.x &lt; caster.x</i>
            <i>check((caster.x-1, caster.y), (CLASS caster tick), self)</i>
        </require>
        <effect>
            <i>TRAVEL (caster.x - 2, caster.y)</i>
            <i>target TRAVEL (target.x +3, caster.y)</i>
        </effect>
        <group>
            <i>king_castle</i>
            <i>time</i>
        </group>
    </king_qcastle>
    
    <!-- unit groups -->

    <tick>
        <effect>CHANGE (ALL tick) ACT 1</effect>
    </tick>
    
    <kings />
    
    <!-- units -->
    
    <pawn>
        <movelist>
            <i>pawn_travel</i>
            <i>pawn_double</i>
            <i>pawn_capture</i>
            <i>pawn_passant</i>
        </movelist>
        <sprite>P</sprite>
    </pawn>
    
    <rook>
        <movelist>rook_travel</movelist>
        <sprite>R</sprite>
    </rook>
    
    <knight>
        <movelist>knight_travel</movelist>
        <sprite>N</sprite>
    </knight>
    
    <bishop>
        <movelist>bishop_travel</movelist>
        <sprite>B</sprite>
    </bishop>
    
    <queen>
        <movelist>
            <i>bishop_travel</i>
            <i>rook_travel</i>
        </movelist>
        <sprite>Q</sprite>
    </queen>
    
    <king>
        <movelist>
            <i>king_kcastle</i>
            <i>king_qcastle</i>
            <i>king_travel</i>
        </movelist>
        <sprite>K</sprite>
        <group>kings</group>
    </king>
    
    <!-- Tick -->
    
    <black>
        <ACT>1</ACT>
        <FLP>-1</FLP>
        <colour>B</colour>
        <group>tick</group>
    </black>
    
    <white>
        <ACT>2</ACT>
        <FLP>1</FLP>
        <colour>W</colour>
        <group>tick</group>
    </white>
</entities>

</udebs>
